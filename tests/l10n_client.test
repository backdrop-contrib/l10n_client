<?php

/**
 * @file
 * Tests for localization client translation submission.
 */

/**
 * Tests translation submission.
 */
class L10nSubmitTranslationTestCase extends DrupalWebTestCase {

  /**
   * Set up.
   */
  protected function setUp() {
    parent::setUp('l10n_client');
  }

  /**
   * Test if submitted translations are saved correctly.
   */
  function testTranslationSubmission() {
    // Create user that is authorized to use the l10n client.
    $admin_user = $this->backdropCreateUser(array(
      'use on-page translation',
      'administer languages',
    ));
    $this->backdropLogin($admin_user);
    // Add German language.
    $edit = array('predefined_langcode' => 'de');
    $this->backdropPost('admin/config/regional/language/add', $edit, t('Add language'));

    // Open the site in german to load the localization client form.
    $this->backdropGet('de');
    // Parse the form token.
    $token_input = $this->xpath("//form[@id='l10n-client-form']//input[@name='form_token']");
    $form_token = (string)$token_input[0]['value'];

    // Post data that will be sent to the server.
    $post = array(
      // Source string that gets translated.
      'source' => 'Content',
      // Translation suggestion.
      'target' => 'Translation suggestion for Content',
      'context' => '',
      'textgroup' => 'default',
      'form_token' => $form_token,
    );

    // Execute the submission using curl.
    // We can not use backdropPost() as this is ajax.
    $action = url('l10n_client/save', array('absolute' => TRUE));
    $response = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post));
    $this->refreshVariables();

    // Get id of the source string.
    $lid = db_query("SELECT lid FROM {locales_source} WHERE source = :source AND context = :context",
      array(
        ':source' => $post['source'],
        ':context' => $post['context'],
      ))
      ->fetchField();
    // Get the saved translation.
    $translation = db_query("SELECT translation FROM {locales_target} WHERE lid = :lid", array(':lid' => $lid))
      ->fetchField();
    // Check if translation was saved successfully saved in local DB.
    $this->assertEqual($translation, $post['target'], 'Translation was successfully saved in local DB.');
  }

}
